@model ServiceCRM.Models.NewActivityModel


@using (Html.BeginForm("SaveActivity", "Customer"))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
       
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
 
            <div class="form-group">
                @Html.LabelFor(model => model.Activity.ActivityType, htmlAttributes: new { @class = "control-label" })
               
                @Html.DropDownListFor(model => model.Activity.ActivityType, new SelectList(Model.ActivityType, "Text", "Value"), "Select Activity Type", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Activity.ActivityType, "", new { @class = "text-danger" })
            </div>
 

        <div class="form-group">
            @Html.LabelFor(model => model.Activity.DueDate, htmlAttributes: new { @class = "control-label" })
     
                @Html.EditorFor(model => model.Activity.DueDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Activity.DueDate, "", new { @class = "text-danger" })
   
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Activity.Notes, htmlAttributes: new { @class = "control-label" })
          
                @Html.EditorFor(model => model.Activity.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Activity.Notes, "", new { @class = "text-danger" })
 
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Activity.Status, htmlAttributes: new { @class = "control-label" })
            @Html.DropDownListFor(model => model.Activity.Status, new SelectList(Model.Status, "Text", "Value"), "Select Status", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Activity.Status, "", new { @class = "text-danger" })

        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Activity.CompletedOn, htmlAttributes: new { @class = "control-label" })
            
                @Html.EditorFor(model => model.Activity.CompletedOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Activity.CompletedOn, "", new { @class = "text-danger" })
          
        </div>
 
        <div class="form-group">
            @Html.HiddenFor(model => model.Activity.IdUser);
            @Html.HiddenFor(model => model.Activity.IdCustomer);
            <div class="col-md-offset-2 col-md-10">
                <div class="pull-right">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                    <input type="submit" value="Save Activity" class="btn btn-primary" />

                </div>
            </div>
        </div>
    </div>
}

 

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
 
}
